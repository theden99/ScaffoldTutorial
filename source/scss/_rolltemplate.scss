//Styling for our rolltemplate. This won't be written yet.
@use '_mixinsandplaceholders';
//Our default variables for our rolltemplate
.sheet-rolltemplate-thj2e{
  --templateFontSize:16px;
  --critColor:green;
  --fumbleColor:red;
  --importantColor:blue;
  --headerBackColor:lightgrey;
  @extend %universalVariables;
  @extend %defaultStyles;
}
//roll template specific darkmode changes to those variables. Other darkmode changes can be found in _generalsetup.scss
.sheet-rolltemplate-darkmode{
  --critColor:green;
  --fumbleColor:red;
  --importantColor:#00ADA2;
  --headerBackColor: var(--dark-surface1);
}
.sheet-rolltemplate-thj2e{
  //Make our template take up more of the horizontal space in the chat pane
  margin:{
    left: -35px;
  }
  padding-bottom:var(--grid-gap);
  //If the template is output with the chat avatar being displayed, give the chat avatar some more room so that we don't overlap it.
  &:not(:first-child){
    margin-top:15px;
  }
  .sheet-header{
    display:grid;
    background-image: linear-gradient(90deg, transparent, var(--headerBackColor) var(--big-gap) calc(100% - var(--big-gap)), transparent);
    padding: var(--half-gap);
    margin-inline: calc(var(--half-gap) * -1);
    h3{
      justify-self:start;
    }
    h4{
      justify-self:end;
    }
  }
  //CSS to show/hide our success/failure message
  .sheet-result-controller{
    &.sheet-result-true ~ .sheet-result-display-false,
    &.sheet-result-false ~ .sheet-result-display-true{
      display:none
    }
  }
  .sheet-result-display-false{
    color:var(--fumbleColor);
  }
  .sheet-result-display-true{
    color:var(--critColor);
  }
  //Our content wrapper
  .sheet-template{
    //We can't set the default font size in the html element in rolltemplates like we did in the sheet. This means that the rem unit uses the default Roll20 font-size of 10px. Because of this we're going to set the font-size on the overall container, and then use the em unit for out font sizes in the roll template.
    font-size:var(--templateFontSize);

    display:grid;
    gap:var(--half-gap);

    //applying the same paper background that we used for our sections
    border:var(--half-gap) solid transparent;
    border-image:{
      source:var(--paper-background);
      slice:40 fill;
      width:var(--grid-gap);
      outset:var(--half-gap);
      repeat:repeat;
    };
    //a fall back background-color for if our image doesn't load.
    background-color: var(--backColor);
    filter:drop-shadow(var(--shadowColor1) 0px 3px 6px) drop-shadow(var(--shadowColor2) 0px 3px 6px);
    padding:var(--half-gap);
    span,
    span *,
    h5,
    h5 *{
      font-size:1em;
    }
    h5{
      font-weight:bold;
      text-align:left;
    }
    h3,
    h3 *{
      font-size:1.25em;
    }
    h4,
    h4 *{
      font-size:1em;
    }
    //Our basic rows of the template are going to be laid out with flex-box so that if the content of the field is short, it will be displayed on a single line. If the content is long, the row will display as a header over the content.
    .sheet-template-row{
      display:flex;
      flex-wrap:wrap;
      gap:var(--half-gap);
      justify-content: space-between;
      align-items:center;
    }
    //Our areas that we expect longer content to exist in will have a border on the top to help visually separate them.
    .sheet-template-row--text{
      border-top:2px solid var(--fontColor);
    }
    .sheet-template-row--summary{
      justify-content:center;
    }
    //The content of our fields will be height restricted so that a chat output has less of a chance of taking up too much space in the chat. Note that this limits the ability of the template to take up space, it does not wholly prevent it from becoming unwieldably large.
    .sheet-description{
      max-height:20rem;
      overflow-y:auto;
      white-space: pre-wrap;
    }

    //Styling for links in our roll template. This will override the in your face styling of the default Roll20 ability and API command buttons.
    a{
      padding:0;
      //For links that are not ability/API command buttons, we want to decorate them as a standard link.
      &:not([href^="!"]),
      &:not([href^="~"]){
        color:var(--fontColor);
        border:none;
        text-decoration: underline;
      }
      //For our ability/API command buttons, we want to make them visually distinct, but keep them displaying inline with the rest of the text around them.
      &[href^="!"],
      &[href^="~"]{
        @extend %buttonInteraction;
        border-radius:5px;
        color:var(--backColor);
        background-color:var(--fontColor);
        text-decoration:none;
        padding-inline:var(--tiny-gap);
        transition:{
          property:box-shadow,backdrop-filter;
          duration:200ms;
          timing-function:ease-out;
        };
      }
    }

    //Styling our inline roll result
    .inlinerollresult{
      //We want our inline rolls to visually pop so that they are easily identifiable
      font-size:1.25em;
      //We'll be looking at computed values in the javascript, but if we send a placeholder value to chat, we don't want to display the hover tooltip for it because it will not give any useful information.
      &[title*="[computed value]"],
      &[original-title*="[computed value]"]{
        pointer-events: none;
      }
      //The default Roll20 inline roll styling does not flow as well inside text. We want to get rid of the border, background and padding.
      &,
      &.fullcrit,
      &.fullfail,
      &.importantroll{
        border: none;
        background-color: transparent;
        padding:0;
      }

      //And then apply roll state specific styling, in this case, just coloring the rolls.
      &.fullcrit{
        color: var(--critColor);
      }
      &.fullfail{
        color: var(--fumbleColor);
      }
      &.importantroll{
        color: var(--importantColor);
      }
    }
  }
}